asigno window.EditorDeInstanciaDeComponente como un componente vue2 con nombre "EditorDeInstanciaDeComponente" con plantilla {
  <div class="EditorDeInstanciaDeComponente">
    <div>
      <div class="panel_de_elementos horizontal_layout">
        <div class="lista_de_elementos_usados w_100">
          <div v-if="!esta_en_elemento_raiz">
            <button class="w_100" v-on:click="() => agregar_elemento_usado()">‚ûï A√±adir elemento</button>
          </div>
          <div>
            <draggable :list="elementos_usados" handle=".dragger" tag="table">
              <tbody class="w_100" v-for="elemento_usado, elemento_usado_index in elementos_usados" v-bind:key="'elemento-usado-barra-vistazo-' + elemento_usado.uuid">
                <tr>
                  <td>
                    <table class="w_100">
                      <tbody>
                        <tr>
                          <td v-if="!esta_en_elemento_raiz">
                            <button class="boton_de_icono active dragger">‚ò∞</button>
                          </td>
                          <td class="w_100">
                            <button class="w_100 caja_de_componente" :class="{active:elemento_usado.esta_editando}" v-on:click="() => alternar_edicion_de_elemento_usado(elemento_usado_index)">
                              {{ elemento_usado.nombre || elemento_usado.tag }}
                            </button>
                          </td>
                          <td>
                            <button class="boton_de_icono" :class="{active:elemento_usado.esta_seleccionada_busqueda_de_componente}" v-on:click="(evento) => alternar_busqueda_de_componente(elemento_usado, evento)">
                            üîç
                            </button>
                          </td>
                          <td>
                            <button class="boton_de_icono" v-on:click="() => agregar_elemento_usado(elemento_usado_index)" v-if="!esta_en_elemento_raiz">
                            ‚ûï
                            </button>
                          </td>
                          <td>
                            <button class="boton_de_icono" v-on:click="() => eliminar_elemento_usado(elemento_usado_index)">
                            ‚ùå
                            </button>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </td>
                </tr>
                <tr v-if="elemento_usado.esta_seleccionada_busqueda_de_componente">
                  <td colspan="1000">
                    <SelectorDeComponenteDeGuiBuilder
                      :acceso-de-texto-de-busqueda="{}"
                      accesor-de-texto-de-busqueda="busqueda"
                      :acceso-de-componentes-seleccionados="elemento_usado"
                      accesor-de-componentes-seleccionados="tag"
                      :al-seleccionar="() => esconder_busqueda_de_componente(elemento_usado)"
                      :opciones="[].concat(elementos_soportados, tester.componentes)"
                      posicion="relative"
                      :desplegado="true">
                    </SelectorDeComponenteDeGuiBuilder>
                  </td>
                </tr>
                <tr v-if="elemento_usado && elemento_usado.esta_editando" v-bind:key="'elemento-usado-barra-esta_editando-' + (elemento_usado ? elemento_usado.uuid : elemento_usado_index)">
                  <td colspan="1000">
                    <div class="separacion_de_subelementos">
                      <section class="tabs">
                        <menu role="tablist">
                          <button role="tab" v-on:click="() => { elemento_usado.esta_seleccionada_pestania = 'atributos'; actualizar_interfaz_de_usuario(); }" :aria-selected="elemento_usado.esta_seleccionada_pestania === 'atributos'"><span class="texto_de_icono">
                          üìé </span></button>
                          <button role="tab" v-on:click="() => { elemento_usado.esta_seleccionada_pestania = 'componentes'; elemento_usado.esta_seleccionado_modo = 'componentes'; actualizar_interfaz_de_usuario(); }"  :aria-selected="elemento_usado.esta_seleccionada_pestania === 'componentes'" :class="{disabled:elemento_usado.esta_seleccionado_modo !== 'componentes'}">
                          üå≤ <span class="texto_de_icono"></span></button>
                          <button role="tab" v-on:click="() => { elemento_usado.esta_seleccionada_pestania = 'texto'; elemento_usado.esta_seleccionado_modo = 'texto'; actualizar_interfaz_de_usuario(); }" :aria-selected="elemento_usado.esta_seleccionada_pestania === 'texto'" :class="{disabled:elemento_usado.esta_seleccionado_modo !== 'texto'}">
                          üìù <span class="texto_de_icono"></span></button>
                          <button role="tab" style="visibility:hidden;width:100%;"></button>
                          <button role="tab" v-on:click="() => { elemento_usado.esta_seleccionada_pestania = 'atajos'; actualizar_interfaz_de_usuario(); }" :aria-selected="elemento_usado.esta_seleccionada_pestania === 'atajos'"><span class="texto_de_icono">
                          üåÄ </span></button>
                          <button role="tab" v-if="elementoPadre && tester.elemento_en_copia" v-on:click="() => { pegar_elemento(elemento_usado) }"><span class="texto_de_icono">
                          üìã </span></button>
                          <button role="tab" v-if="elementoPadre" v-on:click="() => { cortar_elemento(elemento_usado) }">
                          ‚úÇÔ∏è <span class="texto_de_icono"></span></button>
                          <button role="tab" v-if="elementoPadre" v-on:click="() => { copiar_elemento(elemento_usado) }">
                          üìÉ <span class="texto_de_icono"></span></button>
                        </menu>
                        <article class="nopad" role="tabpanel" v-if="elemento_usado.esta_seleccionada_pestania === 'atajos'">
                          <div>
                            <input class="w_100" type="text" placeholder="Buscar atajo..." v-model="texto_de_atajo_seleccionado" ref="caja_buscar_atajo" />
                            <div class="horizontal_layout" style="margin-top:2px;margin-bottom:2px;">
                              <div>
                                <button
                                  style="height:100%;"
                                  v-on:click="() => ir_a_pagina_anterior_de_atajos(elemento_usado)"
                                  :disabled="pagina_de_atajo_seleccionada === 0">‚óÄ
                                </button>
                              </div>
                              <div class="w_100">
                                <table class="w_100" v-if="atajos_paginados">
                                  <tbody v-for="atajo, atajo_index in atajos_paginados" v-bind:key="'atajo-index-' + atajo_index">
                                    <tr>
                                      <td class="w_100">
                                        <button class="w_100" style="text-align:left;" v-on:click="() => ejecutar_atajo(atajo, elemento_usado)">
                                          <span style="overflow: clip; text-overflow: clip '...'; white-space: nowrap;position:relative;width:100%;height:100%;display:block;min-height:12px;">
                                            <span style="position:absolute;left:0px;top:0px;display:inline-block;">
                                              <span>‚ñ∂‚ö° </span>
                                              <span style="">{{ atajo.nombre }}</span>
                                            </span>
                                          </span>
                                        </button>
                                      </td>
                                      <td class="w_auto">
                                        <button :class="{active:atajos_seleccionados.indexOf(atajo.nombre) !== -1}" v-on:click="() => alternar_seleccion_de_atajo(atajo.nombre)">‚öôÔ∏è</button>
                                      </td>
                                    </tr>
                                    <tr v-if="atajos_seleccionados.indexOf(atajo.nombre) !== -1">
                                      <td class="w_auto" colspan="1000">
                                        <div class="formulario_de_atajo" style="position:relative;">
                                          <div>
                                            <input type="text" class="w_100 editor_de_codigo nombre_de_atajo" :value="atajo.nombre" placeholder="Nombre de atajo" />
                                          </div>
                                          <div>
                                            <textarea class="w_100 editor_de_codigo contenido_de_atajo" :value="atajo.contenido" placeholder="C√≥digo en calo"></textarea>
                                          </div>
                                          <div>
                                            <textarea class="w_100 metadatos_de_atajo" v-model="atajo.metadatos" placeholder="Metadatos del atajo"></textarea>
                                          </div>
                                          <div style="position:absolute;right:0;top:0;">
                                            <button style="min-height:15px;height:auto;margin-top:2px;" v-on:click="(event) => guardar_atajos(atajo, atajo_index, false, event.target)">‚úî</button>
                                            <button style="min-height:15px;height:auto;margin-top:2px;" v-on:click="(event) => guardar_atajos(atajo, atajo_index, true, event.target)">‚úî‚úî</button>
                                            <button style="min-height:15px;height:auto;margin-top:2px;" v-on:click="(event) => abrir_dialogo_de_eliminar_atajo(atajo.nombre)">‚ùå</button>
                                          </div>
                                        </div>
                                      </td>
                                    </tr>
                                  </tbody>
                                </table>
                              </div>
                              <div>
                                <button
                                  style="height:100%;"
                                  v-on:click="() => ir_a_pagina_posterior_de_atajos(elemento_usado)"
                                  :disabled="pagina_de_atajo_seleccionada >= paginas_de_atajos_totales">‚ñ∂
                                </button>
                              </div>
                            </div>
                            <div>
                              <button class="w_100" v-on:click="() => abrir_dialogo_de_crear_atajo()">‚ûï A√±adir atajo</button>
                            </div>
                            <div style="text-align: center;padding-top:3px;">P√°gina {{ pagina_de_atajo_seleccionada }} de {{ paginas_de_atajos_totales }}</div>
                          </div>
                        </article>
                        <article class="nopad" role="tabpanel" v-if="elemento_usado.esta_seleccionada_pestania === 'texto'">
                          <div>
                            <textarea class="w_100" v-model="elemento_usado.texto" placeholder="Contenido..."></textarea>
                          </div>
                        </article>
                        <article class="nopad" role="tabpanel" v-if="elemento_usado.esta_seleccionada_pestania === 'atributos'">
                          <div>
                            <button class="w_100" v-on:click="() => agregar_atributo_en_elemento_usado(elemento_usado_index)">‚ûï A√±adir atributo</button>
                            <draggable :list="elemento_usado.atributos" handle=".dragger_para_atributo" tag="table" class="w_100">
                              <tbody v-for="atributo, atributo_index in elemento_usado.atributos" v-bind:key="'elemento_usado_' + elemento_usado_index + '_atributo_' + atributo_index">
                                <tr>
                                  <td>
                                    <table class="w_100">
                                        <tr>
                                          <td>
                                            <button class="boton_de_icono active dragger_para_atributo ">‚ò∞</button>
                                          </td>
                                          <td class="w_100">
                                            <input class="w_100" type="text" v-model="atributo.clave"  placeholder="nombre-del-atributo" />
                                          </td>
                                          <td>
                                            <button class="boton_de_icono" v-on:click="() => alternar_edicion_de_atributo_en_elemento_usado(elemento_usado_index, atributo_index)" :class="{active:atributo.esta_editando}">‚öôÔ∏è</button>
                                          </td>
                                          <td>
                                            <button class="boton_de_icono" v-on:click="() => agregar_atributo_en_elemento_usado(elemento_usado_index, atributo_index)">‚ûï</button>
                                          </td>
                                          <td>
                                            <button class="boton_de_icono" v-on:click="() => eliminar_atributo_en_elemento_usado(elemento_usado_index, atributo_index)">‚ùå</button>
                                          </td>
                                        </tr>
                                        <tr v-if="atributo && atributo.esta_editando">
                                          <td colspan="1000">
                                            <div style="position:relative;">
                                              <textarea class="w_100 editor_de_codigo" v-model="atributo.valor" placeholder="Valor del atributo"></textarea>
                                              <div style="position:absolute;top:auto;bottom:3px;left:auto;right:3px;">
                                                <button :class="{active:atributo.esta_en_calo}" v-on:click="() => { $window.console.log(atributo); atributo.esta_en_calo = !atributo.esta_en_calo; $forceUpdate(true); }">
                                                Calo
                                                </button>
                                              </div>
                                            </div>
                                          </td>
                                        </tr>
                                    </table>
                                  </td>
                                </tr>
                              </tbody>
                            </draggable>
                          </div>
                        </article>
                        <article class="nopad" role="tabpanel"  v-if="elemento_usado.esta_seleccionada_pestania === 'componentes'">
                          <EditorDeInstanciaDeComponente :tester="tester" :elementos-iniciales="elemento_usado.componentes" :elemento-padre="elemento_usado" />
                        </article>
                      </section>
                    </div>
                  </td>
                </tr>
              </tbody>
            </draggable>
          </div>
        </div>
      </div>
    </div>
  </div>
} con l√≥gica {
  retorno {
    propiedad props como {
      uuid: {
        propiedad type como String.
        propiedad default como una funci√≥n donde retorno un texto aleatorio de 20 caracteres.
      },
      plantilla: {
        propiedad type como String.
        propiedad default como una funci√≥n donde retorno "".
      },
      tester: {
        propiedad type como Object.
        propiedad required como true.
      },
      elementosIniciales: {
        propiedad type como Array.
        propiedad required como true.
      },
      elementoPadre: {
        propiedad type como Object.
        propiedad default como null.
      },
      esElementoRaiz: {
        propiedad type como Boolean.
        propiedad required como false.
      }
    }.
    m√©todo data donde {
      debugo "EditorDeInstanciaDeComponente.data".
      creo variable elementos_usados como this.elementosIniciales.
      si this.esElementoRaiz y elementos_usados.length es igual que 0 {
        apendizo un nuevo Elemento_usado() en elementos_usados.
      }.
      retorno {
        esta_en_elemento_raiz: this.esElementoRaiz,
        texto_de_atajo_seleccionado: "",
        paginas_de_atajos_totales: 0,
        pagina_de_atajo_seleccionada: 0,
        items_por_pagina_de_atajo_seleccionada: 6,
        atajos_brutos: [],
        atajos_filtrados: [],
        atajos_paginados: [],
        elementos_soportados,
        elementos_usados,
        atajos_seleccionados: []
      }.
    }.
    propiedad methods como {
      mostrar_error: una funci√≥n donde {
        debugo "EditorDeInstanciaDeComponente.methods.mostrar_error".
      },
      abrir_dialogo_de_crear_atajo: una funci√≥n as√≠ncrona donde {
        debugo "EditorDeInstanciaDeComponente.methods.abrir_dialogo_de_crear_atajo".
        hago as√≠ncronamente this.tester.abrir_dialogo_de_crear_atajo().
        hago as√≠ncronamente this.cargar_atajos().
        hago this.$forceUpdate(true).
      },
      ejecutar_atajo: una funci√≥n as√≠ncrona con (atajo, elemento) donde {
        debugo "EditorDeInstanciaDeComponente.methods.ejecutar_atajo".
        creo codigo_original como atajo.contenido.
        creo codigo_js como Castelog_parser.parse(atajo.contenido).
        creo codigo_atajo como `(async (elemento) => {\n  try {\n    ${codigo_js}\n  } catch(error) {\n    throw error;\n  }\n}).call(this, elemento)`.
        imprimo "Evaluando c√≥digo: " + codigo_atajo.
        creo resultado como as√≠ncronamente eval(codigo_atajo).
        imprimo resultado.
        hago this.$forceUpdate(true).
      } en errores {
        imprimo error.
        hago this.mostrar_error(error).
        lanzo error.
      },
      abrir_dialogo_de_eliminar_atajo: una funci√≥n as√≠ncrona con (nombre_de_atajo) donde {
        debugo "EditorDeInstanciaDeComponente.methods.abrir_dialogo_de_eliminar_atajo".
        hago as√≠ncronamente this.tester.abrir_dialogo_de_eliminar_atajo(nombre_de_atajo).
        hago as√≠ncronamente this.cargar_atajos().
        hago this.$forceUpdate(true).
      },
      guardar_atajos: una funci√≥n con (atajo, atajo_index, tambien_cerrar o en su defecto false, elemento) donde {
        debugo "EditorDeInstanciaDeComponente.methods.guardar_atajos".
        hago this.tester.guardar_atajos().
        si no atajo retorno.
        creo nuevo_nombre como elemento.closest(".formulario_de_atajo").querySelector("input.nombre_de_atajo").value.
        creo nuevo_contenido como elemento.closest(".formulario_de_atajo").querySelector("textarea.contenido_de_atajo").value.
        creo nuevo_metadatos como elemento.closest(".formulario_de_atajo").querySelector("textarea.metadatos_de_atajo").value.
        hago atajo extendido por {
          nombre: nuevo_nombre,
          contenido: nuevo_contenido,
          metadatos: nuevo_metadatos
        }.
        creo atajo_nombre como atajo.nombre.
        si tambien_cerrar es igual que true {
          si atajo_nombre est√° contenido en this.atajos_seleccionados {
            hago this.atajos_seleccionados.splice(this.atajos_seleccionados.indexOf(atajo_nombre), 1).
          }.
        }.
        hago this.tester.guardar_atajos().
        hago this.cargar_atajos().
        si tambien_cerrar {
          hago this.$forceUpdate(true).
        }.
      },
      cargar_atajos: una funci√≥n con () donde {
        debugo "EditorDeInstanciaDeComponente.methods.cargar_atajos".
        hago this.tester.cargar_atajos().
        asigno this.atajos_brutos como [].concat(this.tester.atajos).
      },
      alternar_seleccion_de_atajo: una funci√≥n con (nombre) donde {
        debugo "EditorDeInstanciaDeComponente.methods.alternar_seleccion_de_atajo".
        si this.atajos_seleccionados no contiene valor nombre apendizo nombre en this.atajos_seleccionados;
        y si no hago this.atajos_seleccionados.splice(this.atajos_seleccionados.indexOf(nombre), 1).
      },
      alternar_busqueda_de_componente: una funci√≥n con (elemento_usado, evento) donde {
        debugo "EditorDeInstanciaDeComponente.methods.alternar_busqueda_de_componente".
        asigno elemento_usado.esta_seleccionada_busqueda_de_componente como no elemento_usado.esta_seleccionada_busqueda_de_componente.
        hago evento.target.blur().
        hago this.$forceUpdate(true).
      },
      esconder_busqueda_de_componente: una funci√≥n con (elemento_usado, evento) donde {
        debugo "EditorDeInstanciaDeComponente.methods.esconder_busqueda_de_componente".
        asigno elemento_usado.esta_seleccionada_busqueda_de_componente como false.
        hago this.$forceUpdate(true).
      },
      pegar_elemento: una funci√≥n con (elemento_destino) donde {
        debugo "EditorDeInstanciaDeComponente.methods.pegar_elemento".
        si this.tester.elemento_en_copia_modo es igual que "cortar" {
          imprimo this.tester.elemento_en_copia_padre.
          hago this.tester.elemento_en_copia_padre.componentes.splice(this.tester.elemento_en_copia_padre.componentes.indexOf(this.tester.elemento_en_copia), 1).
        }.
        imprimo this.tester.elemento_en_copia.
        imprimo this.tester.elemento_en_copia_modo.
        imprimo elemento_destino.
        hago elemento_destino extendido por this.tester.elemento_en_copia tambi√©n extendido por {
          uuid: un texto aleatorio de 10 caracteres
        }.
        asigno this.tester.elemento_en_copia como undefined.
        asigno this.tester.elemento_en_copia_padre como undefined.
        asigno this.tester.elemento_en_copia_modo como undefined.
        hago this.guardar_estado().
        hago this.$forceUpdate(true).
      },
      cortar_elemento: una funci√≥n con (elemento) donde {
        debugo "EditorDeInstanciaDeComponente.methods.cortar_elemento".
        asigno this.tester.elemento_en_copia como elemento.
        asigno this.tester.elemento_en_copia_padre como this.elementoPadre.
        asigno this.tester.elemento_en_copia_modo como "cortar".
      },
      copiar_elemento: una funci√≥n con (elemento) donde {
        debugo "EditorDeInstanciaDeComponente.methods.copiar_elemento".
        asigno this.tester.elemento_en_copia como elemento.
        asigno this.tester.elemento_en_copia_padre como this.elementoPadre.
        asigno this.tester.elemento_en_copia_modo como "copiar".
      },
      guardar_estado: una funci√≥n donde {
        debugo "EditorDeInstanciaDeComponente.methods.guardar_estado".
        hago this.tester.guardar_configuraciones_de_componente().
      },
      agregar_elemento_usado: una funci√≥n con (indice_elemento) donde {
        debugo "EditorDeInstanciaDeComponente.methods.agregar_elemento_usado".
        si indice_elemento es tipo indefinido {
          apendizo un nuevo Elemento_usado() en this.elementos_usados.
        } y si no {
          hago this.elementos_usados.splice(indice_elemento, 0, un nuevo Elemento_usado()).
        }.
        hago this.actualizar_interfaz_de_usuario().
      },
      eliminar_elemento_usado: una funci√≥n con (indice) donde {
        debugo "EditorDeInstanciaDeComponente.methods.eliminar_elemento_usado".
        hago this.elementos_usados.splice(indice, 1).
        hago this.actualizar_interfaz_de_usuario().
      },
      alternar_edicion_de_elemento_usado: una funci√≥n con (indice) donde {
        debugo "EditorDeInstanciaDeComponente.methods.alternar_edicion_de_elemento_usado".
        asigno this.elementos_usados[indice].esta_editando como no this.elementos_usados[indice].esta_editando.
        hago this.actualizar_interfaz_de_usuario().
      },
      agregar_atributo_en_elemento_usado: una funci√≥n con (indice_elemento, indice_atributo) donde {
        debugo "EditorDeInstanciaDeComponente.methods.agregar_atributo_en_elemento_usado".
        si indice_atributo es tipo indefinido {
          apendizo un nuevo Atributo_de_elemento_usado() en this.elementos_usados[indice_elemento].atributos.
        } y si no {
          hago this.elementos_usados[indice_elemento].atributos.splice(indice_atributo, 0, un nuevo Atributo_de_elemento_usado()).
        }.
        hago this.actualizar_interfaz_de_usuario().
      },
      alternar_edicion_de_atributo_en_elemento_usado: una funci√≥n con (indice_elemento, indice_atributo) donde {
        debugo "EditorDeInstanciaDeComponente.methods.alternar_edicion_de_atributo_en_elemento_usado".
        asigno this.elementos_usados[indice_elemento].atributos[indice_atributo].esta_editando como no this.elementos_usados[indice_elemento].atributos[indice_atributo].esta_editando.
        hago this.actualizar_interfaz_de_usuario().
      },
      eliminar_atributo_en_elemento_usado: una funci√≥n con (indice_elemento, indice_atributo) donde {
        debugo "EditorDeInstanciaDeComponente.methods.eliminar_atributo_en_elemento_usado".
        hago this.elementos_usados[indice_elemento].atributos.splice(indice_atributo, 1).
        hago this.actualizar_interfaz_de_usuario().
      },
      agregar_componente_en_elemento_usado: una funci√≥n con (indice_elemento, indice_componente) donde {
        debugo "EditorDeInstanciaDeComponente.methods.agregar_componente_en_elemento_usado".
        si indice_componente es tipo indefinido {
          apendizo un nuevo Elemento_usado() en this.elementos_usados.
        } y si no {
          hago this.elementos_usados.splice(indice_elemento, 0, un nuevo Elemento_usado()).
        }.
        hago this.actualizar_interfaz_de_usuario().
      },
      actualizar_interfaz_de_usuario: una funci√≥n donde {
        debugo "EditorDeInstanciaDeComponente.methods.actualizar_interfaz_de_usuario".
        hago this.guardar_estado().
        hago this.$forceUpdate(true).
      },
      ir_a_pagina_anterior_de_atajos: una funci√≥n con () donde {
        debugo "EditorDeInstanciaDeComponente.methods.ir_a_pagina_anterior_de_atajos".
        decremento this.pagina_de_atajo_seleccionada.
        hago this.cargar_atajos().
      },
      ir_a_pagina_posterior_de_atajos: una funci√≥n con () donde {
        debugo "EditorDeInstanciaDeComponente.methods.ir_a_pagina_posterior_de_atajos".
        incremento this.pagina_de_atajo_seleccionada.
        hago this.cargar_atajos().
      }
    }.
    propiedad watch como {
      texto_de_atajo_seleccionado: una funci√≥n donde {
        debugo "EditorDeInstanciaDeComponente.watch.texto_de_atajo_seleccionado".
        hago this.cargar_atajos().
      },
      atajos_brutos: una funci√≥n con (valor) donde {
        debugo "EditorDeInstanciaDeComponente.watch.atajos_brutos".
        asigno this.atajos_filtrados como valor.filter(una lambda con (item) donde {
          si this.texto_de_atajo_seleccionado.length es igual que 0 retorno true.
          retorno (item textualizado).toLowerCase().indexOf(this.texto_de_atajo_seleccionado.toLowerCase()) no es igual que 0-1.
        }).
      },
      atajos_filtrados: una funci√≥n con (valor) donde {
        debugo "EditorDeInstanciaDeComponente.watch.atajos_filtrados".
        asigno this.paginas_de_atajos_totales como Math.floor(valor.length / this.items_por_pagina_de_atajo_seleccionada).
        creo index_inicio como this.pagina_de_atajo_seleccionada * this.items_por_pagina_de_atajo_seleccionada.
        creo index_final como index_inicio + this.items_por_pagina_de_atajo_seleccionada.
        asigno this.atajos_paginados como valor.filter(una lambda con (item, index) donde {
          si (index es mayor o igual que index_inicio) y (index es menor que index_final) retorno true.
        }).
        si this.$refs.caja_buscar_atajo {
          hago this.$nextTick(una lambda con () donde {
            si this.$refs.caja_buscar_atajo retorno this.$refs.caja_buscar_atajo[0].focus().
          }).
        }.
      },
      atajos_paginados: una funci√≥n con (valor) donde {
        debugo "EditorDeInstanciaDeComponente.watch.atajos_paginados".
        
      }
    }.
    m√©todo mounted donde {
      debugo "EditorDeInstanciaDeComponente.mounted".
      hago this.cargar_atajos().
    }.
    m√©todo unmounted donde {
      debugo "EditorDeInstanciaDeComponente.unmounted".
      ### hago this.descompilar_componente_de_test().
    }.
  }.
}.